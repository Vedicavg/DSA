//5th February 2025
1. Minimize Max Distance to Gas Station ** very bad ques ** 
https://www.naukri.com/code360/problems/minimise-max-distance_7541449?utm_source=striver&utm_medium=website&utm_campaign=codestudio_a_zcourse&leftPanelTabValue=PROBLEM

2. Median of 2 sorted arrays :
https://leetcode.com/problems/median-of-two-sorted-arrays/

// class Solution {
// public:
//     double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
//         vector<int>temp;
//         int i=0,j=0;
//         int n1=nums1.size(),n2=nums2.size();
//         while(i<n1 && j<n2){
//             if(nums1[i]<=nums2[j]){
//                 temp.push_back(nums1[i]);
//                 i++;
//             }else 
//             {
//                 temp.push_back(nums2[j]);
//                 j++;
//             }
//         }
//         while(i<n1){
//             temp.push_back(nums1[i]);
//             i++;
//         }
//         while(j<n2){
//             temp.push_back(nums2[j]);
//             j++;
//         }
//         for(auto n :temp){
//             cout<<n<<" ";
//         }cout<<endl;
//         int N=n1+n2;

//         if(N%2==0){//even
//             int index1= N/2;
//             int index2= N/2-1;
//             cout<<"index1 : "<<index1<<endl;
//             cout<<"index2 : "<<index2<<endl;
//             cout<<"temp[index1] : "<<temp[index1]<<endl;
//             cout<<"temp[index2] : "<<temp[index2]<<endl;
            
//             return (double)(temp[index1]+temp[index2])/2;
//         }else 
//         {
//             return (double)temp[N/2];
//         }
//     }
// };

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        int i=0,j=0,cnt=0;
        int n1=nums1.size(),n2=nums2.size();
        int N=n1+n2;
        int ele1=0,ele2=0;
        cout<<"N = "<<N<<endl;
        while(cnt<=N/2 && i<n1&& j<n2){
            if(nums1[i]<=nums2[j]){
                cout<<"i = "<<i<<endl;
                if(cnt==N/2-1)ele1=nums1[i];
                else if (cnt==N/2)ele2=nums1[i];
                i++;
            }else {
                                cout<<"j = "<<j<<endl;
                if(cnt==N/2-1)ele1=nums2[j];
                else if (cnt==N/2)ele2=nums2[j];
                j++;
            }
            cout<<"cnt = "<<cnt<<endl;
            cnt++;
        }

        
        while(i<n1 && cnt<=N/2){
            if(cnt==(N/2-1))ele1=nums1[i];
            else if (cnt==N/2)ele2=nums1[i];
            i++;
            cnt++;
        }
        while(j<n2 && cnt<=N/2){
            if(cnt==(N/2-1))ele1=nums2[j];
            else if (cnt==N/2)ele2=nums2[j];
            j++;
            cnt++;
        }
        
        
        cout<<"ele1 : "<<ele1<<endl;
        cout<<"ele2 : "<<ele2<<endl;
        if(N%2==0){
            return (double)(ele1+ele2)/2;
        }else return ele2;
    }
};